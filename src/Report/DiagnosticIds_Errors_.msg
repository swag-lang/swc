SWC_DIAG_DEF(CmdLineInvalidArg, Error, "invalid command-line argument {arg}")
SWC_DIAG_DEF(CmdLineInvalidArgForCmd, Error, "invalid argument {arg} for command {command}")
SWC_DIAG_DEF(CmdLineInvalidEnumValue, Error, "invalid value {value} for argument {arg}; value of {long} must be one of {values}")
SWC_DIAG_DEF(CmdLineMissingArgValue, Error, "missing value for argument {arg}")
SWC_DIAG_DEF(CmdLineInvalidBoolArg, Error, "invalid negation for argument {arg}; {long} is not a boolean")
SWC_DIAG_DEF(CmdLineMissingCommand, Error, "missing command before arguments")
SWC_DIAG_DEF(CmdLineInvalidCommand, Error, "invalid command {arg}; command must be one of {values}")
SWC_DIAG_DEF(CmdLineInvalidFolder, Error, "invalid folder {path}; {because}")
SWC_DIAG_DEF(CmdLineInvalidFile, Error, "invalid file {path}; {because}")

SWC_DIAG_DEF(CmdSyntaxNoInput, Error, "invalid syntax command; you need to specify at least one --directory or --file")

SWC_DIAG_DEF(CannotOpenFile, Error, "cannot open file {path}; {because}")
SWC_DIAG_DEF(CannotReadFile, Error, "cannot read file {path}; {because}")

SWC_DIAG_DEF(UnRaisedDirective, Error, "directive was declared but never raised")

SWC_DIAG_DEF(LexFileNotUtf8, Error, "file is not valid UTF-8; ensure the file is encoded in UTF-8 format")
SWC_DIAG_DEF(LexUnclosedComment, Error, "unclosed comment; expected */ before end of file")
SWC_DIAG_DEF(LexNewlineInStringLiteral, Error, "unexpected newline in string literal; close the string with a matching quote")
SWC_DIAG_DEF(LexUnclosedStringLiteral, Error, "unclosed string literal; missing closing quote")
SWC_DIAG_DEF(LexConsecutiveNumberSeparators, Error, "invalid numeric literal; consecutive number separators are not allowed")
SWC_DIAG_DEF(LexLeadingNumberSeparator, Error, "invalid numeric literal; leading number separator not allowed")
SWC_DIAG_DEF(LexTrailingNumberSeparator, Error, "invalid numeric literal; trailing number separator not allowed")
SWC_DIAG_DEF(LexMissingHexDigits, Error, "invalid hexadecimal literal; missing digits after 0x")
SWC_DIAG_DEF(LexMissingBinDigits, Error, "invalid binary literal; missing digits after 0b")
SWC_DIAG_DEF(LexMissingExponentDigits, Error, "invalid numeric literal; missing digits after exponent")
SWC_DIAG_DEF(LexInvalidBinDigit, Error, "invalid binary digit {tok}; only 0 or 1 are allowed")
SWC_DIAG_DEF(LexInvalidEscapeSequence, Error, "invalid escape sequence {tok}; unknown or unsupported escape")
SWC_DIAG_DEF(LexEmptyCharLiteral, Error, "empty character literal; expected a single character")
SWC_DIAG_DEF(LexUnclosedCharLiteral, Error, "unclosed character literal; missing closing quote")
SWC_DIAG_DEF(LexInvalidHexDigit, Error, "invalid hexadecimal digit {tok}; valid digits are 0–9 and A–F")
SWC_DIAG_DEF(LexIncompleteHexEscape, Error, "incomplete hexadecimal escape sequence {tok}; expected two hex digits")
SWC_DIAG_DEF(LexEmptyHexEscape, Error, "empty hexadecimal escape sequence {tok}; expected at least one hex digit")
SWC_DIAG_DEF(LexTooManyCharsInCharLiteral, Error, "too many characters in character literal; only one allowed")
SWC_DIAG_DEF(LexInvalidNumberSuffix, Error, "invalid number suffix {tok}; not a recognized numeric type suffix")
SWC_DIAG_DEF(LexInvalidCharacter, Error, "invalid character {tok}; not allowed in source file")

SWC_DIAG_DEF(ParserUnterminatedBlock, Error, "unterminated block; expected {end} before end of file")
SWC_DIAG_DEF(ParserUnexpectedToken, Error, "unexpected {tok-fam} {tok}")
SWC_DIAG_DEF(ParserExpectedToken, Error, "expected {expect-tok} {because}, found {tok-fam} {tok}")
SWC_DIAG_DEF(ParserExpectedTokenFam, Error, "expected {expect-a-tok-fam} {because}, found {tok-fam} {tok}")
SWC_DIAG_DEF(ParserExpectedTokenAfter, Error, "expected {expect-tok} after {after} {because}, found {tok-fam} {tok}")
SWC_DIAG_DEF(ParserExpectedTokenFamAfter, Error, "expected {expect-a-tok-fam} after {after} {because}, found {tok-fam} {tok}")
SWC_DIAG_DEF(ParserInvalidType, Error, "invalid type declaration {tok}")
SWC_DIAG_DEF(ParserMissingClosing, Error, "missing closing {expect-tok} {because}")
SWC_DIAG_DEF(ParserMissingClosingBefore, Error, "missing closing {expect-tok} {because} before {tok}")




